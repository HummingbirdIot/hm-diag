// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: local.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	Pubkey(ctx context.Context, in *PubkeyReq, opts ...grpc.CallOption) (*PubkeyRes, error)
	Sign(ctx context.Context, in *SignReq, opts ...grpc.CallOption) (*SignRes, error)
	Ecdh(ctx context.Context, in *EcdhReq, opts ...grpc.CallOption) (*EcdhRes, error)
	Config(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigRes, error)
	Height(ctx context.Context, in *HeightReq, opts ...grpc.CallOption) (*HeightRes, error)
	Region(ctx context.Context, in *RegionReq, opts ...grpc.CallOption) (*RegionRes, error)
	AddGateway(ctx context.Context, in *AddGatewayReq, opts ...grpc.CallOption) (*AddGatewayRes, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) Pubkey(ctx context.Context, in *PubkeyReq, opts ...grpc.CallOption) (*PubkeyRes, error) {
	out := new(PubkeyRes)
	err := c.cc.Invoke(ctx, "/helium.local.api/pubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Sign(ctx context.Context, in *SignReq, opts ...grpc.CallOption) (*SignRes, error) {
	out := new(SignRes)
	err := c.cc.Invoke(ctx, "/helium.local.api/sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Ecdh(ctx context.Context, in *EcdhReq, opts ...grpc.CallOption) (*EcdhRes, error) {
	out := new(EcdhRes)
	err := c.cc.Invoke(ctx, "/helium.local.api/ecdh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Config(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigRes, error) {
	out := new(ConfigRes)
	err := c.cc.Invoke(ctx, "/helium.local.api/config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Height(ctx context.Context, in *HeightReq, opts ...grpc.CallOption) (*HeightRes, error) {
	out := new(HeightRes)
	err := c.cc.Invoke(ctx, "/helium.local.api/height", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Region(ctx context.Context, in *RegionReq, opts ...grpc.CallOption) (*RegionRes, error) {
	out := new(RegionRes)
	err := c.cc.Invoke(ctx, "/helium.local.api/region", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) AddGateway(ctx context.Context, in *AddGatewayReq, opts ...grpc.CallOption) (*AddGatewayRes, error) {
	out := new(AddGatewayRes)
	err := c.cc.Invoke(ctx, "/helium.local.api/add_gateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	Pubkey(context.Context, *PubkeyReq) (*PubkeyRes, error)
	Sign(context.Context, *SignReq) (*SignRes, error)
	Ecdh(context.Context, *EcdhReq) (*EcdhRes, error)
	Config(context.Context, *ConfigReq) (*ConfigRes, error)
	Height(context.Context, *HeightReq) (*HeightRes, error)
	Region(context.Context, *RegionReq) (*RegionRes, error)
	AddGateway(context.Context, *AddGatewayReq) (*AddGatewayRes, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) Pubkey(context.Context, *PubkeyReq) (*PubkeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pubkey not implemented")
}
func (UnimplementedApiServer) Sign(context.Context, *SignReq) (*SignRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedApiServer) Ecdh(context.Context, *EcdhReq) (*EcdhRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ecdh not implemented")
}
func (UnimplementedApiServer) Config(context.Context, *ConfigReq) (*ConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedApiServer) Height(context.Context, *HeightReq) (*HeightRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Height not implemented")
}
func (UnimplementedApiServer) Region(context.Context, *RegionReq) (*RegionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Region not implemented")
}
func (UnimplementedApiServer) AddGateway(context.Context, *AddGatewayReq) (*AddGatewayRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGateway not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_Pubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubkeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Pubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.local.api/pubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Pubkey(ctx, req.(*PubkeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.local.api/sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Sign(ctx, req.(*SignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Ecdh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EcdhReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Ecdh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.local.api/ecdh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Ecdh(ctx, req.(*EcdhReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.local.api/config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Config(ctx, req.(*ConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Height_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Height(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.local.api/height",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Height(ctx, req.(*HeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Region_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Region(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.local.api/region",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Region(ctx, req.(*RegionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_AddGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGatewayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).AddGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.local.api/add_gateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).AddGateway(ctx, req.(*AddGatewayReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helium.local.api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "pubkey",
			Handler:    _Api_Pubkey_Handler,
		},
		{
			MethodName: "sign",
			Handler:    _Api_Sign_Handler,
		},
		{
			MethodName: "ecdh",
			Handler:    _Api_Ecdh_Handler,
		},
		{
			MethodName: "config",
			Handler:    _Api_Config_Handler,
		},
		{
			MethodName: "height",
			Handler:    _Api_Height_Handler,
		},
		{
			MethodName: "region",
			Handler:    _Api_Region_Handler,
		},
		{
			MethodName: "add_gateway",
			Handler:    _Api_AddGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "local.proto",
}
